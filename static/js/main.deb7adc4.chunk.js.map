{"version":3,"sources":["components/nasa_image/NasaImage.js","App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","Alert","props","elevation","variant","useStyles","makeStyles","root","minWidth","media","height","paddingTop","NasaImage","title","explanation","url","date","hdurl","React","useState","get","likeButton","setLikeButton","share","setShare","useEffect","set","classes","handleClose","event","reason","Card","className","CardActionArea","onClick","window","open","CardMedia","image","CardContent","Typography","gutterBottom","component","color","CardActions","Button","size","endIcon","Icon","navigator","clipboard","writeText","Snackbar","autoHideDuration","onClose","severity","theme","flexGrow","navBar","background","textField","noMargin","margin","App","nasaImages","setNasaImages","picOfDay","setPicOfDay","podCheck","setPodCheck","displayImages","setDisplayImages","count","parseInt","urlParams","setUrlParams","URL","searchParams","append","fetchParams","method","mode","cache","getPicOfDay","a","length","fetch","response","json","responseJSON","getNasaImages","Object","keys","forEach","key","Array","isArray","AppBar","position","Toolbar","FormGroup","row","FormControlLabel","control","Switch","name","checked","onChange","label","TextField","id","type","defaultValue","target","value","inputProps","min","Grid","container","direction","justifyContent","alignItems","spacing","map","element","index","item","xs","s","m","lg","xlg","Collapse","in","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.deb7adc4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Cookies from 'universal-cookie';\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst Alert = (props) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: \"100%\",\r\n  },\r\n  media: {\r\n    height: \"0\",\r\n    paddingTop: '56.25%',\r\n  },\r\n});\r\n\r\nconst NasaImage = ({ title, explanation, url, date, hdurl }) => {\r\n  const [likeButton, setLikeButton] = React.useState(\r\n    cookies.get(url) === 'false' || !cookies.get(url) ? false : true\r\n  );\r\n  const [share, setShare] = React.useState(false);\r\n\r\n  // Set up cookies\r\n  React.useEffect(() => {\r\n    cookies.set(url, likeButton);\r\n  }, [likeButton]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const likeClicked = (event) => {\r\n    likeButton ? setLikeButton(false) : setLikeButton(true);\r\n  };\r\n\r\n  const handleShare = (event) => {\r\n    setShare(true);\r\n    navigator.clipboard.writeText(hdurl);\r\n  };\r\n\r\n  const setLikeButtonColor = () => {\r\n    return likeButton ? \"primary\" : \"default\";\r\n  };\r\n  const setLikeButtonVariant = () => {\r\n    return likeButton ? \"contained\" : \"outlined\";\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setShare(false);\r\n  };\r\n\r\n  const handleNewTab = () => {\r\n    window.open(hdurl);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={handleNewTab}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={url}\r\n          title={title}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {title}\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h6\">\r\n            {date}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {explanation}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button\r\n          onClick={likeClicked}\r\n          size=\"small\"\r\n          variant={setLikeButtonVariant()}\r\n          color={setLikeButtonColor()}\r\n          endIcon={<Icon>thumb_up</Icon>}\r\n        >\r\n          Like\r\n        </Button>\r\n        <Button\r\n          onClick={handleShare}\r\n          size=\"small\"\r\n          variant=\"outlined\"\r\n          color=\"default\"\r\n          endIcon={<Icon>share</Icon>}\r\n        >\r\n          Share\r\n        </Button>\r\n      </CardActions>\r\n      <Snackbar\r\n        open={share}\r\n        autoHideDuration={1300}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert severity=\"info\" onClose={handleClose}>\r\n          Link copied to clipboard\r\n        </Alert>\r\n      </Snackbar>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NasaImage;","import './App.css';\nimport React from 'react';\nimport NasaImage from './components/nasa_image/NasaImage';\n\n// Material Ui\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Collapse from '@material-ui/core/Collapse';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconst useStyles = makeStyles((theme) => {\n  return (\n    {\n      root: {\n        flexGrow: 1,\n      },\n\n      navBar: {\n        background: \"#222629\",\n      },\n\n      textField: {\n        '& label': {\n          color: \"white\",\n        },\n        '& label.Mui-focused': {\n          color: \"white\",\n        },\n        '& input.MuiInputBase-input': {\n          color: \"white\"\n        },\n      },\n      noMargin: {\n        margin: \"0\",\n      }\n    }\n  );\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  const [nasaImages, setNasaImages] = React.useState([]);\n  const [picOfDay, setPicOfDay] = React.useState([]);\n  const [podCheck, setPodCheck] = React.useState(true);\n  const [displayImages, setDisplayImages] = React.useState([]);\n  const [urlParams, setUrlParams] = React.useState(\n    {\n      count: cookies.get(\"count\") ? parseInt(cookies.get(\"count\")) : 10,\n    }\n  );\n\n  const url = new URL(\"https://api.nasa.gov/planetary/apod\");\n  const apiKey = \"EYNdwCv2ngW0Sf5h9ZUVICjuKhYNGNho47VOoZO6\";\n  url.searchParams.append(\"api_key\", apiKey);\n  const fetchParams = {\n    method: 'GET',\n    mode: 'cors',\n    cache: 'default'\n  };\n\n  const getPicOfDay = async () => {\n    if (picOfDay.length === 0) {\n      let response = await fetch(url, fetchParams);\n\n      const responseJSON = await response.json();\n\n      setPicOfDay([responseJSON]);\n    }\n  };\n\n  const getNasaImages = async () => {\n\n    Object.keys(urlParams).forEach(key => url.searchParams.append(key, urlParams[key]));\n\n    let response = await fetch(url, fetchParams);\n\n    let responseJSON = await response.json();\n\n    // Make it into an array of 1 if it's not by default.\n    if (!Array.isArray(responseJSON)) {\n      responseJSON = [responseJSON];\n    }\n\n    setNasaImages(responseJSON);\n  };\n\n  React.useEffect(() => {\n    getPicOfDay();\n    getNasaImages();\n    cookies.set(\"count\", urlParams.count);\n  }, [urlParams]);\n\n  React.useEffect(() => {\n    setDisplayImages([...picOfDay, ...nasaImages]);\n  }, [picOfDay, nasaImages, podCheck]);\n\n  const handlePodCheck = () => {\n    setPodCheck(!podCheck);\n  };\n\n  const handleRnadomImageNum = (event) => {\n    event.target.value = !parseInt(event.target.value) || parseInt(event.target.value) <= 0 || parseInt(event.target.value) > 100 ? \"1\" : event.target.value;\n    setUrlParams({\n      count: event.target.value,\n    });\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.navBar}>\n        <Toolbar variant=\"dense\">\n          <Typography className={classes.root} variant=\"h6\" color=\"inherit\">\n            Spacestagram\n          </Typography>\n          <FormGroup row>\n            <FormControlLabel\n              control={\n                <Switch\n                  name=\"podCheck\"\n                  checked={podCheck}\n                  onChange={handlePodCheck}\n                />\n              }\n              label=\"Picture of the Day\"\n            />\n            <TextField\n              className={classes.textField}\n              color=\"secondary\"\n              id=\"standard-basic\"\n              label=\"Random Images\"\n              variant=\"filled\"\n              type=\"number\"\n              size=\"small\"\n              defaultValue={urlParams.count}\n              onChange={handleRnadomImageNum}\n              inputProps={{min: \"1\"}}\n            />\n          </FormGroup>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={4}\n      >\n\n        {\n          displayImages.length ? displayImages.map((element, index) => {\n            if (index === 0) {\n              return (\n                <Grid key={index} item xs={12} s={12} m={6} lg={6} xlg={6}>\n                  <Collapse in={podCheck}>\n                    <NasaImage\n                      explanation={element.explanation}\n                      title={element.title}\n                      url={element.url}\n                      date={element.date}\n                      hdurl={element.hdurl}\n                    />\n                  </Collapse>\n                </Grid>\n              );\n            }\n            else {\n              return (\n                <Grid key={index} item xs={12} s={12} m={6} lg={6} xlg={6}>\n                  <NasaImage\n                    explanation={element.explanation}\n                    title={element.title}\n                    url={element.url}\n                    date={element.date}\n                    hdurl={element.hdurl}\n                  />\n                </Grid>\n              );\n            }\n\n          }) : <CircularProgress color=\"secondary\"></CircularProgress>\n        }\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Remove strict mode for now because Material UI causes warnings otherwise.\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}